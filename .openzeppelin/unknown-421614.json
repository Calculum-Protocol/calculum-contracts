{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xf7b8edE8184B710C3C76e9BD1Af199051DeE8728",
      "txHash": "0xba2ba41b4665e96ab4e8cfcfdf6c6e5caeab75368688d3fa2a6b3eb46cb54ca4",
      "kind": "transparent"
    },
    {
      "address": "0x08B579a3412939551c7C5A0bCbE234fE7E2Dce01",
      "txHash": "0x57a88e8c0106d8f5902fdd5744d658261b5e3bd87a6e3a0c47ff95bf3d6c80d2",
      "kind": "transparent"
    },
    {
      "address": "0xF2B6e6F5DfCc92619076e08Bd9a520Ebe4Cf72b3",
      "txHash": "0x949adfa940a6355ce4460dca5c48418af910406dca41d5b7e1e0ee7b5b797bca",
      "kind": "transparent"
    },
    {
      "address": "0x35086a229166d8A54Bb61EA4301005fa85Cc9fD2",
      "txHash": "0x34454243fb3d0b5b3dcdc501270fd133e6cdb9ecd7b1889feceaac2713245081",
      "kind": "transparent"
    },
    {
      "address": "0x03c429Dd07dF92529AFb9191e489644121974280",
      "txHash": "0x3bb34b9813e3b0b6d233d091f72e889e30a85d4b6f64e73bf6c68d35aac8ab53",
      "kind": "transparent"
    },
    {
      "address": "0xcCD1820ec24cA756a6A7E66cA417E9Fbf4A41079",
      "txHash": "0x367480096284e260cf7f3b886d05593c5411c2566b970a082000e859ccb0ec05",
      "kind": "transparent"
    },
    {
      "address": "0xB3E3B39bC3Dff7d69847bd47806b75501558c4e4",
      "txHash": "0xbd9582960ac34fdfd414af782c8e5319515142ab2fd4c58e7bcff7e6cae1ed39",
      "kind": "transparent"
    },
    {
      "address": "0xc13B6C2291A3fd1A786Adb197383EE03Cb74ae9F",
      "txHash": "0x3c73764231c572eead47f246b5c864eb0fef2e4a533245934c5b59bbecbb9fe0",
      "kind": "transparent"
    },
    {
      "address": "0x2109dB950eD763C2bc381fEDe1f0D637E617E35f",
      "txHash": "0x873075fabc5ed8d6a5f2fcf76b7fffb23e774a488dc3a9387c8bdd579750cbb9",
      "kind": "transparent"
    },
    {
      "address": "0x6a4684f30d223Ad0FE3eBceb2358005538147139",
      "txHash": "0xa5624eae469c28ca73aeb40c3388a1eb77034b20a4f1259d94dc58e7db5bdea8",
      "kind": "transparent"
    },
    {
      "address": "0x3c22c1B0fb6F580201D9aEeD96Ed221861864289",
      "txHash": "0xc95b22049492d171df305895294e5af1ff3953e81f2027b37ee4875db540613a",
      "kind": "transparent"
    },
    {
      "address": "0xf43249FFD2a9ED5Db0dEbe963063CAe5AD2Aeb46",
      "txHash": "0x9de82d55ec765077b3eac1562eb533f5869e279b04c6b13b9707b3162d7c6c67",
      "kind": "transparent"
    },
    {
      "address": "0x916151E15999c71Ca475CAF1441f393BcC5d567C",
      "txHash": "0x5df8d582325681df2cab5e0edeeb4cd282ccdfa4a97b1389d747834cd942c5fe",
      "kind": "transparent"
    },
    {
      "address": "0x31cFcB0f4eE5B9b2A111B85eC1e814939Ee23E7C",
      "txHash": "0xbead066af809ca5ad7ee189c0bc05f7724da17277ceeda1186eef21117783eac",
      "kind": "transparent"
    },
    {
      "address": "0x8C468A95EF7dD41eFF8d921d34Cc5dD6695bbd8F",
      "txHash": "0xdcb4058f75659c6c00ef7224b44b261468b473e2195151101cbd99ee4843eda8",
      "kind": "transparent"
    },
    {
      "address": "0x357c89bF0af3E7E5e814D216378aC042709278e4",
      "txHash": "0xf8866ab9710808ca82203373f2cb40d6b2faf40f33422551b8387d0295731ccd",
      "kind": "transparent"
    },
    {
      "address": "0xb9D6cEaD4a787eF764e6C41f6c80a08a5F16B76B",
      "txHash": "0x96929c14ac5d056cd4f84283d73320775210f5ae388b834aed050459add5bc3a",
      "kind": "transparent"
    },
    {
      "address": "0xCc2cDAd298813F9819BD8B2831a292da268dFF3f",
      "txHash": "0x024a632872a1b126aa854e969193abebbd8e54dfccbe26dbd854048d5a17f0ad",
      "kind": "transparent"
    },
    {
      "address": "0xDDfa23a7E35Cede6baa6a94f304573E55864B6eA",
      "txHash": "0x99c75431e8ecbc203c24c801e923d25cf99cb46c045002c038b3f541c86b729a",
      "kind": "transparent"
    },
    {
      "address": "0x63d5d50e5c5B016f7A428A57Cd6FEc018b5a3071",
      "txHash": "0x9942abe9a3d579c7b889fa82c7b7b7030b2662c258b369f95427816978e93f18",
      "kind": "transparent"
    },
    {
      "address": "0x3e91bfb58A9FD0B9040633F8b286EEF52364D996",
      "txHash": "0x17053ea0a182310d957b5780b44a0f4dd85d75bd95af99256583fbef487d8bfd",
      "kind": "transparent"
    },
    {
      "address": "0x6d7c6567DdC757Bdc187A4A71A3C3Ab5C2691FE1",
      "txHash": "0x3a2afe3f35aa2d0351b18d1ac99303ad86fc01f3995f29b43a40ef7a60028435",
      "kind": "transparent"
    },
    {
      "address": "0x99803f9f9BbDc52460191be9A39eA64701Ea628B",
      "txHash": "0xe9679ace683cea58ac6a59d2fea175a3b6334de24d8e85acaa0ca2f8ebdb792c",
      "kind": "transparent"
    },
    {
      "address": "0xED9bb7baC5FbE74fAfa02018C962Ecd63C3705a3",
      "txHash": "0x7bd6bd906affbaf757b216e29af1e73453842bf402908430859df5ea47beeda2",
      "kind": "transparent"
    },
    {
      "address": "0x33BEc06b82146C5Cc368149F6b5A534BF702ccC1",
      "txHash": "0xcdc6ca43f868313578111a2e37e0007bb2d7e43442bba18a5aebae9be853024e",
      "kind": "transparent"
    },
    {
      "address": "0x5D89e98CA6151CF20924970C6614e5b253802d65",
      "txHash": "0xfbcf08387507e54feeffa97d8a29b18ae6a6c7976733fcb1da7334df10868eeb",
      "kind": "transparent"
    },
    {
      "address": "0x0Be1B7F48dab4f391176E23D87B222EaD71f5A89",
      "txHash": "0x71d6e05f4b6bb33b69232383e997464b149fc8f27d8f57578e2756de40967695",
      "kind": "transparent"
    },
    {
      "address": "0x955f5a848DAFC19837A180942468CF97865a3281",
      "txHash": "0x632eadd69661e4ef9271f055dd363c6cfb0e13d5b325c731ecc63c07ca50ceb1",
      "kind": "transparent"
    },
    {
      "address": "0x0986B51b387dA2aF1badF1E9FdB99911D7160e72",
      "txHash": "0x106be5b9c1965c37ddbeff78cc51cd97809ce6805869fa8fd48b5b0021f13441",
      "kind": "transparent"
    },
    {
      "address": "0x6176543535A11d2D5BF0D08455806B85Bd29923F",
      "txHash": "0xe588d9266d080e9a3aa15d4d85237ba29b7db28aa7bf08503aefcd0c8a3e5757",
      "kind": "transparent"
    },
    {
      "address": "0xa93998FAc099eCd2Aa39483772a7cF5F035fe329",
      "txHash": "0xd48ba59d17900109639cec93deb46bad373f5bc5b03efd9962a7b4caf85a6f46",
      "kind": "transparent"
    },
    {
      "address": "0xF92b7c95A2f5F60Ba8127F7A2F10833Ca3431Ed7",
      "txHash": "0xfea6d6411741da103b5e08cd4b48ace5d1e57fdf2db0ab7635bca16017c53546",
      "kind": "transparent"
    },
    {
      "address": "0x09dD402294dd636b3CeCAF4f47859e66311D2E64",
      "txHash": "0x92c27626ea35413b02d2b1a5ac866336a36b7239f20fc1b46b751475b7623b86",
      "kind": "transparent"
    },
    {
      "address": "0x28348ae3c82046F805B77D4BDD8FAc77D3AcFb5e",
      "txHash": "0x057c98ee59aa8d0dec2e028664e5d13e352004e750d1b55ff271522442de6ba9",
      "kind": "transparent"
    },
    {
      "address": "0xc89d85691a1eEF2F6Fe5A937899F402992414161",
      "txHash": "0xd5049931d82a61082665a3c7934043fa80ca265bdd11a1a512e2a7bfa50e1eba",
      "kind": "transparent"
    },
    {
      "address": "0x15474B5115747791c30fAE5744fB9d0623D17De5",
      "txHash": "0x0fe64186000d0136866065bf1fa81a93ebdf9f1afc6845b4dd567f7f399a151d",
      "kind": "transparent"
    },
    {
      "address": "0xf8F24574E6d98d852aB301211Ee297E768e9BfF5",
      "txHash": "0xf4892ce6b8beef3c3f40cfec99e42504ff46a4fdbb52681a58dff3374a3522bd",
      "kind": "transparent"
    },
    {
      "address": "0x9d5c05B3f99ceA60E8e0327F4a5DAFD0bE8716Bb",
      "txHash": "0xe7c0c6d6ab998019c7ad78909bba4711530ec35b0ee7995701e4c9e7a615ed64",
      "kind": "transparent"
    },
    {
      "address": "0x352da8dcF3B3e495c9398b19B2213B789343d647",
      "txHash": "0x0fb1ca80913dadd5f567de587b6601324bcc23a9aef1791fdfe10d55b635c101",
      "kind": "transparent"
    },
    {
      "address": "0x66Ea7D08B9A7dE9E0c5522659aC994Ae38C18E47",
      "txHash": "0xfb10a90a2595196b64091345778e0aa364dd190568c311475752dd4b6146c56a",
      "kind": "transparent"
    },
    {
      "address": "0x45753Fb96c068b8EF40D4b83c379e287EBd836CE",
      "txHash": "0x3288d34b617d9ca9c490ac52ad306c086bcd7451a70fe8f2f06466b68ca86e24",
      "kind": "transparent"
    },
    {
      "address": "0xC62d64Cd77d91B45DB94dc8a8bf7DB069320CcbD",
      "txHash": "0x7afa9c52ecfae08c615bff876da33922d7f94bd500750bcc6a31e2241df0bfee",
      "kind": "transparent"
    },
    {
      "address": "0xD332414A71585012701Cb8220CcE9a5DC8F78f07",
      "txHash": "0x15c352724a738d0334d8b6df15b289359f863c84be6af43eebed8ee59c205484",
      "kind": "transparent"
    },
    {
      "address": "0x7120870045218DDcA0b90D27f5EAB7aC154F907B",
      "txHash": "0x2837150abdbef9c4ac1d058a4cac7c985cadd178c6d7c2f9703ecc1ea7f4c4bd",
      "kind": "transparent"
    },
    {
      "address": "0x5b891A3A056C5aE78f23f9464C2DED9a100cdfAC",
      "txHash": "0x0ab55d84208717ac6f6bfa63461457d7b6d711748d22699e37be6ecd3e7400a4",
      "kind": "transparent"
    }
  ],
  "impls": {
    "d94cc3e03c845a949ef22ed528a78dd3136c029fbb7bef0b33f965935ed7792c": {
      "address": "0xBf7FA5660b5cC51E3F57a1E6B5e49dda6fBc873c",
      "txHash": "0x086fc7ac043149e08b1e24e692ce8b353b2b59d7cb59de11fb3784fc101010dd",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)8098_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)9810",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:42"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:44"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:46"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:48"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:50"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:52"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "355",
            "type": "t_address",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:54"
          },
          {
            "label": "spotEngine",
            "offset": 0,
            "slot": "356",
            "type": "t_address",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:56"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "357",
            "type": "t_address",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:58"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "358",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:60"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "359",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:62"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "360",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:64"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "361",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:66"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "362",
            "type": "t_contract(IRouter)16756",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:68"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "363",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:72"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:74"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:76"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:78"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:80"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "368",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:82"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "369",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:84"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "370",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:86"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "371",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:88"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "372",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:90"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "373",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:92"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "374",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:94"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "375",
            "type": "t_array(t_address)dyn_storage",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:96"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "376",
            "type": "t_mapping(t_address,t_struct(Basics)15210_storage)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:98"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "377",
            "type": "t_array(t_address)dyn_storage",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:100"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "378",
            "type": "t_mapping(t_address,t_struct(Basics)15210_storage)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:102"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "379",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)15218_storage)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:106"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "380",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:108"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)9810": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)16756": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)15199": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)15210_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)8098_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)15218_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)15210_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)15199",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(NetTransfer)15218_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)8098_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "5d0a7e6497b3a7e9c482a05b4a61722ec189f1859576ac06124c1f16d03cd4fc": {
      "address": "0x3c5600f4C5cb75054a3648c5043c59feafAF6fb6",
      "txHash": "0x2d17642999f08fea47f5a41fbb307676aae48c9ba963345f3fec841fd033793e",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)8098_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)9810",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:42"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:44"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:46"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:48"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:50"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:52"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "355",
            "type": "t_address",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:54"
          },
          {
            "label": "spotEngine",
            "offset": 0,
            "slot": "356",
            "type": "t_address",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:56"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "357",
            "type": "t_address",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:58"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "358",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:60"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "359",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:62"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "360",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:64"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "361",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:66"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "362",
            "type": "t_contract(IRouter)18151",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:68"
          },
          {
            "label": "oracle",
            "offset": 0,
            "slot": "363",
            "type": "t_contract(Oracle)12712",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:70"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:72"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:74"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:76"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:78"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "368",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:80"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "369",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:82"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "370",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:84"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "371",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:86"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "372",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:88"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "373",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:90"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "374",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:92"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "375",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:94"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "376",
            "type": "t_array(t_address)dyn_storage",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:96"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "377",
            "type": "t_mapping(t_address,t_struct(Basics)16069_storage)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:98"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "378",
            "type": "t_array(t_address)dyn_storage",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:100"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "379",
            "type": "t_mapping(t_address,t_struct(Basics)16069_storage)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:102"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "380",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)16077_storage)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:106"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "381",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:108"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)9810": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)18151": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_contract(Oracle)12712": {
            "label": "contract Oracle",
            "numberOfBytes": "20"
          },
          "t_enum(Status)16058": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)16069_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)8098_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)16077_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)16069_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)16058",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(NetTransfer)16077_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)8098_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "fe01a4c81437a5c7fa985e62096eda983c46f4ce900546ab1d49d7c3fed3273d": {
      "address": "0xA7FBF9B91931AD595E2cD07C1Fb4B088E660c258",
      "txHash": "0x609a852acdedfc4a178520857c025b84742e6721de1e36da5f7dd5068bc240bd",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)8098_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)9810",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:42"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:44"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:46"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:48"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:50"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:52"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "355",
            "type": "t_address",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:54"
          },
          {
            "label": "spotEngine",
            "offset": 0,
            "slot": "356",
            "type": "t_address",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:56"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "357",
            "type": "t_address",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:58"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "358",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:60"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "359",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:62"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "360",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:64"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "361",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:66"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "362",
            "type": "t_contract(IRouter)16756",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:68"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "363",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:72"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:74"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:76"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:78"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:80"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "368",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:82"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "369",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:84"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "370",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:86"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "371",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:88"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "372",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:90"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "373",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:92"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "374",
            "type": "t_uint256",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:94"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "375",
            "type": "t_array(t_address)dyn_storage",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:96"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "376",
            "type": "t_mapping(t_address,t_struct(Basics)15210_storage)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:98"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "377",
            "type": "t_array(t_address)dyn_storage",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:100"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "378",
            "type": "t_mapping(t_address,t_struct(Basics)15210_storage)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:102"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "379",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)15218_storage)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:106"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "380",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "CalculumVault",
            "src": "src/CalculumVault.sol:108"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)9810": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)16756": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)15199": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)15210_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)8098_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)15218_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)15210_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)15199",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(NetTransfer)15218_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)8098_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "2c5c09d588efe6f55567ad2b184084c01db28c4ee7eab7b5fa845b299fc74a07": {
      "address": "0x3F887B0df0192dBD25672423e6E0C26702b00f15",
      "txHash": "0x5010be06b83f9f1e3ac76b3dd6b1c582d43523f963b206568b654cc9069a78cf",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)1746",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:40"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:42"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:44"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:46"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:48"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:50"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "355",
            "type": "t_address",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:52"
          },
          {
            "label": "spotEngine",
            "offset": 0,
            "slot": "356",
            "type": "t_address",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:54"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "357",
            "type": "t_address",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:56"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "358",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:58"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "359",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:60"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "360",
            "type": "t_contract(IRouter)9117",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:62"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "361",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:66"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "362",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:68"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "363",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:70"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:72"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:74"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:76"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:78"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "368",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:80"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "369",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:82"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "370",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:84"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "371",
            "type": "t_mapping(t_address,t_struct(Basics)7521_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:86"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "372",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:88"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "373",
            "type": "t_mapping(t_address,t_struct(Basics)7521_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:90"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "374",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7529_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:94"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "375",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:96"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)1746": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9117": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7510": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)7521_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7529_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7521_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7510",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(NetTransfer)7529_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "bd8b91e8264c00888ee6b8ab5a5f04e17153cd6895bf1e1224afa7c73cebeddb": {
      "address": "0x51C4191Ae1adbce2fe646232D075c6Bf217e0C86",
      "txHash": "0xeb5c9d5e694b20a293026cb21b811b8edd223e47a6e534b526916e83a3e354b4",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)1746",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:40"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:42"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:44"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:46"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:48"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:50"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "355",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:52"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "356",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:54"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "357",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:56"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "358",
            "type": "t_contract(IRouter)8412",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:58"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "359",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:62"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "360",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:64"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "361",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:66"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "362",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:68"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "363",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:70"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:72"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:74"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:76"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:78"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "368",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:80"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "369",
            "type": "t_mapping(t_address,t_struct(Basics)6816_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:82"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "370",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:84"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "371",
            "type": "t_mapping(t_address,t_struct(Basics)6816_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:86"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "372",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)6824_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:90"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "373",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:92"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)1746": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)8412": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)6805": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)6816_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)6824_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)6816_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)6805",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(NetTransfer)6824_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "8dab4791ae028722673457a8f0f0eb5845ba62c96a048946bdce9dae5e8af139": {
      "address": "0x742935651cbE04C6661E8C753843e4A2E57482FB",
      "txHash": "0x70016f9af09f2da7f9ae56190bce3833c3863566b10f0a18b215a4e3d63c946f",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)1746",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:40"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:42"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:44"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:46"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:48"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:50"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "355",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:52"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "356",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:54"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "357",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:56"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "358",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:58"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "359",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:60"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "360",
            "type": "t_contract(IRouter)13217",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:62"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "361",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:66"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "362",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:68"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "363",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:70"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:72"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:74"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:76"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:78"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "368",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:80"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "369",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:82"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "370",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:84"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "371",
            "type": "t_mapping(t_address,t_struct(Basics)11085_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:86"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "372",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:88"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "373",
            "type": "t_mapping(t_address,t_struct(Basics)11085_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:90"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "374",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)11093_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:94"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "375",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:96"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)1746": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)13217": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)11074": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)11085_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)11093_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)11085_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)11074",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(NetTransfer)11093_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "60c369cd18b3469f59633d9dff34150295eb2bc8c99849be5ed2b398cad538b6": {
      "address": "0x499d1E069f16c3C72d01E8c5708F41183B29Df36",
      "txHash": "0x9daca845403f3fb4c02ae5c15f9499e29ba0f5bf094403ec7c3b33df9d329928",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)1746",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:40"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:42"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:44"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:46"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:48"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:50"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "355",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:52"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "356",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:54"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "357",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:56"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "358",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:58"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "359",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:60"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "360",
            "type": "t_contract(IRouter)13142",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:62"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "361",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:66"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "362",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:68"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "363",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:70"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:72"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:74"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:76"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:78"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "368",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:80"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "369",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:82"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "370",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:84"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "371",
            "type": "t_mapping(t_address,t_struct(Basics)11010_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:86"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "372",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:88"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "373",
            "type": "t_mapping(t_address,t_struct(Basics)11010_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:90"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "374",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)11018_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:94"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "375",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:96"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)1746": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)13142": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)10999": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)11010_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)11018_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)11010_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)10999",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(NetTransfer)11018_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "c51427475fb6513448af5e9fbd859518ad57a11c7928c6ea8d29fa155164357f": {
      "address": "0x02CA29169e51C699a4fCB71AaA2fbf5D092c0288",
      "txHash": "0xa1c96bf0ffafb56a54edcabd62db4c51c3dfcc788375fbb267ee1ce12665f046",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)1746",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:40"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:42"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:44"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:46"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:48"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:50"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "355",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:52"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "356",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:54"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "357",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:56"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "358",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:58"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "359",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:60"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "360",
            "type": "t_contract(IRouter)8333",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:62"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "361",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:66"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "362",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:68"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "363",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:70"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:72"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:74"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:76"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:78"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "368",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:80"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "369",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:82"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "370",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:84"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "371",
            "type": "t_mapping(t_address,t_struct(Basics)6737_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:86"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "372",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:88"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "373",
            "type": "t_mapping(t_address,t_struct(Basics)6737_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:90"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "374",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)6745_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:94"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "375",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:96"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)1746": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)8333": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)6726": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)6737_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)6745_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)6737_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)6726",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(NetTransfer)6745_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "cb4a5e9655a9923b3072afaeeb9ba23e61beb9deff7fce280007c00f2ea5eb9a": {
      "address": "0xb7b13FD481F16F752AADeCBa2B2C34DbC6053BAa",
      "txHash": "0x0fd575aac347c9763f456a749bc4eb2395ad4bca8080c2cb7ff6508478e58315",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)1746",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:39"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:41"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:43"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:45"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:47"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:49"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "355",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:51"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "356",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:53"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "357",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:55"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "358",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:57"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "359",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:59"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "360",
            "type": "t_contract(IRouter)7334",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:61"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "361",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:65"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "362",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:67"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "363",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:69"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:71"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:73"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:75"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:77"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "368",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:79"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "369",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:81"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "370",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:83"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "371",
            "type": "t_mapping(t_address,t_struct(Basics)6736_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:85"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "372",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:87"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "373",
            "type": "t_mapping(t_address,t_struct(Basics)6736_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:89"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "374",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)6744_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:93"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "375",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:95"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)1746": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)7334": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)6725": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)6736_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)6744_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)6736_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)6725",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(NetTransfer)6744_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "5cfbc354991ae4d252b002fc9cb05587da1eaf98c140b38cf43175bb588f8cd5": {
      "address": "0x3895614eDEEC22942a628d19680Dab66a72B332a",
      "txHash": "0xb812c702fa2e4abf742a44b40b44f1515cf70eb999cf5762c89c13d6b2a7bc34",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)1746",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:39"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:41"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:43"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:45"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:47"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:49"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "355",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:51"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "356",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:53"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "357",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:55"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "358",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:57"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "359",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:59"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "360",
            "type": "t_contract(IRouter)12943",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:61"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "361",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:65"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "362",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:67"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "363",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:69"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:71"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:73"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:75"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:77"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "368",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:79"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "369",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:81"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "370",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:83"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "371",
            "type": "t_mapping(t_address,t_struct(Basics)10806_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:85"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "372",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:87"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "373",
            "type": "t_mapping(t_address,t_struct(Basics)10806_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:89"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "374",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:93"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)1746": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)12943": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)10795": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)10806_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)10806_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)10795",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "81aba7cc5f38e3d8bdb9aacdc8247a34a83de1d589d36ac1ad0bb426c950587f": {
      "address": "0x08C3b17Bd6354aD8B1E90CB9f90F296FCEA1f0a9",
      "txHash": "0x78216dbce0fb7017c41c94236413762b96f451399afe4c1fc73f2f3e1d04a0b1",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)1746",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:39"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:41"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:43"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:45"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:47"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:49"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "355",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:51"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "356",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:53"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "357",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:55"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "358",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:57"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "359",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:59"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "360",
            "type": "t_contract(IRouter)13005",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:61"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "361",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:65"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "362",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:67"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "363",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:69"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:71"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:73"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:75"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:77"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "368",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:79"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "369",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:81"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "370",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:83"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "371",
            "type": "t_mapping(t_address,t_struct(Basics)10840_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:85"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "372",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:87"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "373",
            "type": "t_mapping(t_address,t_struct(Basics)10840_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:89"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "374",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:93"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)1746": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)13005": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)10829": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)10840_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)10840_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)10829",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "3ec4de0c0aa91ea431aefd27788f38435cbd9b94a1cd2c8ba0436b7db5a9e412": {
      "address": "0xd27977B761e405d34bBDc1bC5A282E601d2F654C",
      "txHash": "0x1b2ba5165b9108bc3a338a9f284c452b85b4414898c094518ced339c1f34ce3d",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "201",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "301",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "351",
            "type": "t_contract(IERC20MetadataUpgradeable)1746",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:35"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "351",
            "type": "t_uint8",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:37"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "351",
            "type": "t_bool",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:39"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "352",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:41"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "353",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:43"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "354",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:45"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "355",
            "type": "t_address_payable",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:47"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "356",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:49"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "357",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:51"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "358",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:53"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "359",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:55"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "360",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:57"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "361",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:59"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "362",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:61"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "363",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:63"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "364",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:65"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "365",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:67"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "366",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:69"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "367",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:71"
          },
          {
            "label": "ETH_GAS_RESERVE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "368",
            "type": "t_uint256",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:73"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "369",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:75"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "370",
            "type": "t_mapping(t_address,t_struct(Basics)10898_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:77"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "371",
            "type": "t_array(t_address)dyn_storage",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:79"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "372",
            "type": "t_mapping(t_address,t_struct(Basics)10898_storage)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:81"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "373",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TestVaultFront",
            "src": "src/TestVaultFront.sol:85"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20MetadataUpgradeable)1746": {
            "label": "contract IERC20MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_enum(Status)10887": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Basics)10898_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)10898_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)10887",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "6f0a670679a12c0d5e6b58b1ae74c8f67f373749064a40b81a0765e8f20d0aee": {
      "address": "0xB5500e0894ADfFcF3b110fD7dE95E2f9507d0794",
      "txHash": "0x929b70a70b3b5b32dec5c5deb0ca1cafc3e9956cb14834195f80619d1fcf6b57",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:74"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:76"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:78"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:80"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:82"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:84"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:86"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:88"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:90"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:92"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:94"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:96"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:98"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)13168",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:100"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:102"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:104"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:106"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:108"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:110"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:112"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:114"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:116"
          },
          {
            "label": "FLOOR_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:118"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:120"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "21",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:122"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_struct(Basics)11507_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:124"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:126"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)11507_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:128"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)11515_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:134"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:136"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "27",
            "type": "t_struct(Limit)11521_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:138"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)13168": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)11496": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)11507_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)11515_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)11507_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)11496",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)11521_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "amountBlock",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)11515_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "f1cfa138d17e29bba4d6b9835168944bda69bb51b745428d2cffb951fb1e220c": {
      "address": "0x6D582bB46728aE0A3Abf104F6De04Fb85eaA856A",
      "txHash": "0xc22eebd56e177d6708e4bdb3a9a0dbb34be9704d78da126ab4545f8042849434",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:74"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:76"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:78"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:80"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:82"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:84"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:86"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:88"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:90"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:92"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:94"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:96"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:98"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)13168",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:100"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:102"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:104"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:106"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:108"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:110"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:112"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:114"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:116"
          },
          {
            "label": "FLOOR_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:118"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:120"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "21",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:122"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_struct(Basics)11507_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:124"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:126"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)11507_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:128"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)11515_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:134"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:136"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "27",
            "type": "t_struct(Limit)11521_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:138"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)13168": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)11496": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)11507_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)11515_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)11507_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)11496",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)11521_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "amountBlock",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)11515_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "a17a4815bef857d3a17f176db926e2d2312906731f46d9ab009db870b57f20d1": {
      "address": "0x08726D74553898f146a024daa47DF59b766ab7FF",
      "txHash": "0x29a25a2080b33861fa9b84c2c49abb47824072474bf4e025a87a7e2c90fd0582",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:51"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:53"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:59"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "97fa60df9195cac237e0a65f230624317694e483495ae70f60f2913876b1e23a": {
      "address": "0xBb44a17C1638D3a8b6181733c4A415032f53611f",
      "txHash": "0x0518720e0bad199595e7c908da359250b320aa975cf688d13e9f8f30bf4eeee0",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:74"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:76"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:78"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:80"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:82"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:84"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:86"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:88"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:90"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:92"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:94"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:96"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:98"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9252",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:100"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:102"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:104"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:106"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:108"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:110"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:112"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:114"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:116"
          },
          {
            "label": "FLOOR_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:118"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:120"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "21",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:122"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_struct(Basics)7591_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:124"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:126"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7591_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:128"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7599_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:134"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:136"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "27",
            "type": "t_struct(Limit)7605_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:138"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9252": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7580": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7591_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7599_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7591_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7580",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7605_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "amountBlock",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7599_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "270c1d5781d6cba9172b96294cbdace96f61acf627bae1f3e306cc143e200bd2": {
      "address": "0x4C0a33Cff25A93CaA69584Fcd992d5b97cFa2944",
      "txHash": "0x79b6e5c1d56e6aa8d096d5dbd548f57ebb70a036aded30ea0075ab17b3a07a48",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:74"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:76"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:78"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:80"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:82"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:84"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:86"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:88"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:90"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:92"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:94"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:96"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:98"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)15472",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:100"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:102"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:104"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:106"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:108"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:110"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:112"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:114"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:116"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:118"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:120"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:122"
          },
          {
            "label": "FLOOR_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:124"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:126"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "24",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:128"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_struct(Basics)13816_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:130"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "26",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:132"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_struct(Basics)13816_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:134"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)13824_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:140"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:142"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "30",
            "type": "t_struct(Limit)13830_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:144"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)15472": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)13805": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)13816_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)13824_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)13816_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)13805",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)13830_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "amountBlock",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)13824_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "f71c78408a64f70835372198d6c4182871a947a88a0f6fcdffe3519279e5e3ad": {
      "address": "0x4accB72D1CB5B290C7Dcf57CdADDfDBD3863AAcF",
      "txHash": "0x89ebc7a4d3cb023fe06701192ba9a7565f3643386d22e7a933033a7f7a7d2ee2",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2773",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)16201",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)14529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)14529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)14537_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "29",
            "type": "t_struct(Limit)14543_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:141"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2773": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)16201": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)14518": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)14529_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)14537_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)14529_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)14518",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)14543_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)14537_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "7ca4d88457b636bc253741aeed8316f382b49e88675aa9db1183e3e61f06b524": {
      "address": "0xc0d40676Ebd49CD9C4fa67b1cF94aeB134482Feb",
      "txHash": "0xa8e50f93977624ae235433c3a716ce7bcca648894c0d61af2b804a0d7539fae0",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2773",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)16121",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)14449_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)14449_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)14457_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)14463_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2773": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)16121": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)14438": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)14449_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)14457_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)14449_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)14438",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)14463_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)14457_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "37a13451ad6daf1a9ee191b55c958457044d07274cfa0118f510fccd9ed20833": {
      "address": "0x79Fe13B25b9C9B13895A441174f3E767e05EC313",
      "txHash": "0x54d4cc4de243f9aa35f4250000062dc155d78ff684f4e516d1d07cc3f66c6ddd",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9158",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7486_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)7486_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7494_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)7500_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9158": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7475": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7486_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7494_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7486_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7475",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7500_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7494_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "16a02c0528a1d8eb50a02b30be784c1a12217a143b26eab77cc660148334081a": {
      "address": "0x839C564f90fd66490a9a72F79016b662bAd6942E",
      "txHash": "0x0968ebb3b47ce162f868d24318f7b58751bdf22d818bdeb94e38e57ca46d74d6",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9156",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7484_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)7484_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7492_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)7498_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9156": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7473": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7484_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7492_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7484_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7473",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7498_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7492_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "f07c5716ab358538076011da2cb603f77bc8bea0edb8ef6071f75f2f41a5fa65": {
      "address": "0x3338FB1149208f52ed00f9572b62D21a6b1bE686",
      "txHash": "0x332722819c2ac628a0f98023ed66c6bc6d55a122a25fcd4893c4cf4bc7f30898",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9153",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7481_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)7481_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7489_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)7495_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9153": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7470": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7481_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7489_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7481_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7470",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7495_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7489_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "7b1907a2229ffd72627fbccabc02420c98f79039e6ed5fecf8f395f82c1e8fa6": {
      "address": "0xBEa83b4454Df4CE4A32A17574DCE47a4ECC62C48",
      "txHash": "0xc4c315a766c47f321f0d652c1a666406d366f1bd97ab481c71aa8e32dc532792",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9153",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7481_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)7481_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7489_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)7495_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9153": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7470": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7481_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7489_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7481_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7470",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7495_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7489_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "ac73ad687f79686ea278ad99e869b46f750e080b0658787f83af84636edd6a7d": {
      "address": "0x1BDE90725af7d10bcb1edCb9F88963841047Ed71",
      "txHash": "0xa8a877d6e96f6bd7061fac8ba20aca67e4c701b95d02a049e0c528fba1ab475e",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9153",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7481_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)7481_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7489_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)7495_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9153": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7470": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7481_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7489_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7481_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7470",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7495_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7489_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "41ff31cebc17656d984d07f172d271f42d5e0c579ac37570d70a56a36adf0654": {
      "address": "0xEfC912315b30a0EB340224d3B304f3Fa65630Aa4",
      "txHash": "0x30bf8b228cb9a0a3607ac36cd7e03431354c1b0265f19ebbd36ae81ae0717573",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:33"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:35"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:55"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "ee31b53a77805e601af560c541fa02860128a0a89c932d54ccba75116d79390d": {
      "address": "0xD9c4994f1DCE648588F6f68f04f68Ca6B2E10603",
      "txHash": "0x5543f127b427c3562d97b2638b6af2cd5ae2dea74a1a7380a0fcc9e7f25174e9",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:33"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:35"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:55"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "4df22c79b80d9c5ef110f95ef191439847667ad2d769018a7f7a1f807e7098af": {
      "address": "0xd25A169c6fFcb2ff4dcEbE9b1C604b1ef10fFDE6",
      "txHash": "0x37f6e5e54faf24634f455a4d72e02b4b2229d0c65ab7fe7be9fe2f47862bf6ae",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:33"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:35"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:55"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "6c23b1bddc1c377e3748d4263ce29da656a18f4194173a65ff8d3a0f7e64c43d": {
      "address": "0x8Ba26262643c810aB5DCe996745D2542F4Bc8334",
      "txHash": "0x5576082fa0717ee25c3b5a9b0985c7a0abbc3d88cb480bb468da96fdcecfd02f",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:33"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:35"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:55"
          },
          {
            "label": "balance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:57"
          },
          {
            "label": "usdcPrice",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:58"
          },
          {
            "label": "perpProduct",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(PerpProduct)6095_storage",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:59"
          },
          {
            "label": "subaccountInfo",
            "offset": 0,
            "slot": "22",
            "type": "t_struct(SubaccountInfo)6135_storage",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:60"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_array(t_int128)dyn_storage)dyn_storage": {
            "label": "int128[][]",
            "numberOfBytes": "32"
          },
          "t_array(t_int128)dyn_storage": {
            "label": "int128[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(HealthInfo)6102_storage)dyn_storage": {
            "label": "struct IFQuerier.HealthInfo[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpBalance)6036_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpProduct)6095_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpProduct[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotBalance)6027_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotProduct)6078_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotProduct[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_int128": {
            "label": "int128",
            "numberOfBytes": "16"
          },
          "t_struct(Balance)6184_storage": {
            "label": "struct IPerpEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "vQuoteBalance",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Balance)6512_storage": {
            "label": "struct ISpotEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(BookInfo)6058_storage": {
            "label": "struct IFQuerier.BookInfo",
            "members": [
              {
                "label": "sizeIncrement",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "priceIncrementX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "minSize",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "collectedFees",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "lpSpreadX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Config)6498_storage": {
            "label": "struct ISpotEngine.Config",
            "members": [
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "interestInflectionUtilX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "interestFloorX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "interestSmallCapX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "interestLargeCapX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(HealthInfo)6102_storage": {
            "label": "struct IFQuerier.HealthInfo",
            "members": [
              {
                "label": "assets",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "liabilities",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "health",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(LegacyRisk)6047_storage": {
            "label": "struct IFQuerier.LegacyRisk",
            "members": [
              {
                "label": "longWeightInitialX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "shortWeightInitialX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "longWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "shortWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "largePositionPenaltyX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpBalance)6200_storage": {
            "label": "struct IPerpEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpBalance)6527_storage": {
            "label": "struct ISpotEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpState)6195_storage": {
            "label": "struct IPerpEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingPerLpX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "quote",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpState)6524_storage": {
            "label": "struct ISpotEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "quote",
                "type": "t_struct(Balance)6512_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_struct(Balance)6512_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(PerpBalance)6036_storage": {
            "label": "struct IFQuerier.PerpBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)6200_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)6184_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(PerpProduct)6095_storage": {
            "label": "struct IFQuerier.PerpProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)6047_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "state",
                "type": "t_struct(State)6177_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)6195_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)6058_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(SpotBalance)6027_storage": {
            "label": "struct IFQuerier.SpotBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)6527_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)6512_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(SpotProduct)6078_storage": {
            "label": "struct IFQuerier.SpotProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)6047_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "config",
                "type": "t_struct(Config)6498_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "state",
                "type": "t_struct(State)6507_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)6524_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)6058_storage",
                "offset": 0,
                "slot": "12"
              }
            ],
            "numberOfBytes": "480"
          },
          "t_struct(State)6177_storage": {
            "label": "struct IPerpEngine.State",
            "members": [
              {
                "label": "cumulativeFundingLongX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingShortX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "availableSettle",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "openInterest",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(State)6507_storage": {
            "label": "struct ISpotEngine.State",
            "members": [
              {
                "label": "cumulativeDepositsMultiplierX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeBorrowsMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "totalDepositsNormalized",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalBorrowsNormalized",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(SubaccountInfo)6135_storage": {
            "label": "struct IFQuerier.SubaccountInfo",
            "members": [
              {
                "label": "subaccount",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "healths",
                "type": "t_array(t_struct(HealthInfo)6102_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "healthContributions",
                "type": "t_array(t_array(t_int128)dyn_storage)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "spotCount",
                "type": "t_uint32",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "perpCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "4"
              },
              {
                "label": "spotBalances",
                "type": "t_array(t_struct(SpotBalance)6027_storage)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "perpBalances",
                "type": "t_array(t_struct(PerpBalance)6036_storage)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "spotProducts",
                "type": "t_array(t_struct(SpotProduct)6078_storage)dyn_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "perpProducts",
                "type": "t_array(t_struct(PerpProduct)6095_storage)dyn_storage",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "0fd653e5b745f1d393d3ff739c46c2415ac761c2bf8bddf2321459b03f04664c": {
      "address": "0xc84E90Bc7288e75ec97e4954d922219FB154ae28",
      "txHash": "0xe19f2825fb3c3f393a13d3f32e9b5434101c4c4ca0cf379fb97257be2c40fc25",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:33"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:35"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:55"
          },
          {
            "label": "balance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:57"
          },
          {
            "label": "usdcPrice",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:58"
          },
          {
            "label": "perpProduct",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(PerpProduct)13003_storage",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:59"
          },
          {
            "label": "subaccountInfo",
            "offset": 0,
            "slot": "22",
            "type": "t_struct(SubaccountInfo)13043_storage",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:60"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_array(t_int128)dyn_storage)dyn_storage": {
            "label": "int128[][]",
            "numberOfBytes": "32"
          },
          "t_array(t_int128)dyn_storage": {
            "label": "int128[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(HealthInfo)13010_storage)dyn_storage": {
            "label": "struct IFQuerier.HealthInfo[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpBalance)12944_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpProduct)13003_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpProduct[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotBalance)12935_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotProduct)12986_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotProduct[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_int128": {
            "label": "int128",
            "numberOfBytes": "16"
          },
          "t_struct(Balance)13092_storage": {
            "label": "struct IPerpEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "vQuoteBalance",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Balance)13516_storage": {
            "label": "struct ISpotEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(BookInfo)12966_storage": {
            "label": "struct IFQuerier.BookInfo",
            "members": [
              {
                "label": "sizeIncrement",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "priceIncrementX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "minSize",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "collectedFees",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "lpSpreadX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Config)13502_storage": {
            "label": "struct ISpotEngine.Config",
            "members": [
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "interestInflectionUtilX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "interestFloorX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "interestSmallCapX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "interestLargeCapX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(HealthInfo)13010_storage": {
            "label": "struct IFQuerier.HealthInfo",
            "members": [
              {
                "label": "assets",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "liabilities",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "health",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(LegacyRisk)12955_storage": {
            "label": "struct IFQuerier.LegacyRisk",
            "members": [
              {
                "label": "longWeightInitialX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "shortWeightInitialX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "longWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "shortWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "largePositionPenaltyX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpBalance)13108_storage": {
            "label": "struct IPerpEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpBalance)13531_storage": {
            "label": "struct ISpotEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpState)13103_storage": {
            "label": "struct IPerpEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingPerLpX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "quote",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpState)13528_storage": {
            "label": "struct ISpotEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "quote",
                "type": "t_struct(Balance)13516_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_struct(Balance)13516_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(PerpBalance)12944_storage": {
            "label": "struct IFQuerier.PerpBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)13108_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)13092_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(PerpProduct)13003_storage": {
            "label": "struct IFQuerier.PerpProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)12955_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "state",
                "type": "t_struct(State)13085_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)13103_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)12966_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(SpotBalance)12935_storage": {
            "label": "struct IFQuerier.SpotBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)13531_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)13516_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(SpotProduct)12986_storage": {
            "label": "struct IFQuerier.SpotProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)12955_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "config",
                "type": "t_struct(Config)13502_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "state",
                "type": "t_struct(State)13511_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)13528_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)12966_storage",
                "offset": 0,
                "slot": "12"
              }
            ],
            "numberOfBytes": "480"
          },
          "t_struct(State)13085_storage": {
            "label": "struct IPerpEngine.State",
            "members": [
              {
                "label": "cumulativeFundingLongX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingShortX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "availableSettle",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "openInterest",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(State)13511_storage": {
            "label": "struct ISpotEngine.State",
            "members": [
              {
                "label": "cumulativeDepositsMultiplierX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeBorrowsMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "totalDepositsNormalized",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalBorrowsNormalized",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(SubaccountInfo)13043_storage": {
            "label": "struct IFQuerier.SubaccountInfo",
            "members": [
              {
                "label": "subaccount",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "healths",
                "type": "t_array(t_struct(HealthInfo)13010_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "healthContributions",
                "type": "t_array(t_array(t_int128)dyn_storage)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "spotCount",
                "type": "t_uint32",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "perpCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "4"
              },
              {
                "label": "spotBalances",
                "type": "t_array(t_struct(SpotBalance)12935_storage)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "perpBalances",
                "type": "t_array(t_struct(PerpBalance)12944_storage)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "spotProducts",
                "type": "t_array(t_struct(SpotProduct)12986_storage)dyn_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "perpProducts",
                "type": "t_array(t_struct(PerpProduct)13003_storage)dyn_storage",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "13f4ecd666af3352182fd30681db159ff5d3725fdba2f2686d53ba0e95841aac": {
      "address": "0x8f00E0E9f52ee2acB4193a754F81a7F96E36b677",
      "txHash": "0x66a908ae771d4411ff2a980a70c90ee16d07b5a872d3db5973b3a84a0df77f2f",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2773",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:51"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:53"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:59"
          },
          {
            "label": "balance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:61"
          },
          {
            "label": "usdcPrice",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:62"
          },
          {
            "label": "perpProduct",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(PerpProduct)13759_storage",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:63"
          },
          {
            "label": "subaccountInfo",
            "offset": 0,
            "slot": "22",
            "type": "t_struct(SubaccountInfo)13799_storage",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:64"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_array(t_int128)dyn_storage)dyn_storage": {
            "label": "int128[][]",
            "numberOfBytes": "32"
          },
          "t_array(t_int128)dyn_storage": {
            "label": "int128[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(HealthInfo)13766_storage)dyn_storage": {
            "label": "struct IFQuerier.HealthInfo[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpBalance)13700_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpProduct)13759_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpProduct[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotBalance)13691_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotProduct)13742_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotProduct[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2773": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_int128": {
            "label": "int128",
            "numberOfBytes": "16"
          },
          "t_struct(Balance)13848_storage": {
            "label": "struct IPerpEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "vQuoteBalance",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Balance)14272_storage": {
            "label": "struct ISpotEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(BookInfo)13722_storage": {
            "label": "struct IFQuerier.BookInfo",
            "members": [
              {
                "label": "sizeIncrement",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "priceIncrementX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "minSize",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "collectedFees",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "lpSpreadX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Config)14258_storage": {
            "label": "struct ISpotEngine.Config",
            "members": [
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "interestInflectionUtilX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "interestFloorX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "interestSmallCapX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "interestLargeCapX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(HealthInfo)13766_storage": {
            "label": "struct IFQuerier.HealthInfo",
            "members": [
              {
                "label": "assets",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "liabilities",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "health",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(LegacyRisk)13711_storage": {
            "label": "struct IFQuerier.LegacyRisk",
            "members": [
              {
                "label": "longWeightInitialX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "shortWeightInitialX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "longWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "shortWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "largePositionPenaltyX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpBalance)13864_storage": {
            "label": "struct IPerpEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpBalance)14287_storage": {
            "label": "struct ISpotEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpState)13859_storage": {
            "label": "struct IPerpEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingPerLpX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "quote",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpState)14284_storage": {
            "label": "struct ISpotEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "quote",
                "type": "t_struct(Balance)14272_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_struct(Balance)14272_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(PerpBalance)13700_storage": {
            "label": "struct IFQuerier.PerpBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)13864_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)13848_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(PerpProduct)13759_storage": {
            "label": "struct IFQuerier.PerpProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)13711_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "state",
                "type": "t_struct(State)13841_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)13859_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)13722_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(SpotBalance)13691_storage": {
            "label": "struct IFQuerier.SpotBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)14287_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)14272_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(SpotProduct)13742_storage": {
            "label": "struct IFQuerier.SpotProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)13711_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "config",
                "type": "t_struct(Config)14258_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "state",
                "type": "t_struct(State)14267_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)14284_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)13722_storage",
                "offset": 0,
                "slot": "12"
              }
            ],
            "numberOfBytes": "480"
          },
          "t_struct(State)13841_storage": {
            "label": "struct IPerpEngine.State",
            "members": [
              {
                "label": "cumulativeFundingLongX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingShortX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "availableSettle",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "openInterest",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(State)14267_storage": {
            "label": "struct ISpotEngine.State",
            "members": [
              {
                "label": "cumulativeDepositsMultiplierX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeBorrowsMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "totalDepositsNormalized",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalBorrowsNormalized",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(SubaccountInfo)13799_storage": {
            "label": "struct IFQuerier.SubaccountInfo",
            "members": [
              {
                "label": "subaccount",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "healths",
                "type": "t_array(t_struct(HealthInfo)13766_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "healthContributions",
                "type": "t_array(t_array(t_int128)dyn_storage)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "spotCount",
                "type": "t_uint32",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "perpCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "4"
              },
              {
                "label": "spotBalances",
                "type": "t_array(t_struct(SpotBalance)13691_storage)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "perpBalances",
                "type": "t_array(t_struct(PerpBalance)13700_storage)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "spotProducts",
                "type": "t_array(t_struct(SpotProduct)13742_storage)dyn_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "perpProducts",
                "type": "t_array(t_struct(PerpProduct)13759_storage)dyn_storage",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "1cdc64f5082b3443243e2bc90de187ab50a3a62f88428a5e4f3b8b66028e4d56": {
      "address": "0x2397C62457adC932Ad4485e0C3AB7a70Ac63eA7d",
      "txHash": "0xd46212af010fde7c5f4acf43412bd41e2d1a936021f5498313c6ac8f4479ad1e",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2773",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:51"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:53"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:59"
          },
          {
            "label": "balance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:61"
          },
          {
            "label": "subaccountInfo",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(SubaccountInfo)13806_storage",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:62"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_array(t_int128)dyn_storage)dyn_storage": {
            "label": "int128[][]",
            "numberOfBytes": "32"
          },
          "t_array(t_int128)dyn_storage": {
            "label": "int128[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(HealthInfo)13773_storage)dyn_storage": {
            "label": "struct IFQuerier.HealthInfo[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpBalance)13707_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpProduct)13766_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpProduct[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotBalance)13698_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotProduct)13749_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotProduct[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2773": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_int128": {
            "label": "int128",
            "numberOfBytes": "16"
          },
          "t_struct(Balance)13855_storage": {
            "label": "struct IPerpEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "vQuoteBalance",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Balance)14279_storage": {
            "label": "struct ISpotEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(BookInfo)13729_storage": {
            "label": "struct IFQuerier.BookInfo",
            "members": [
              {
                "label": "sizeIncrement",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "priceIncrementX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "minSize",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "collectedFees",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "lpSpreadX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Config)14265_storage": {
            "label": "struct ISpotEngine.Config",
            "members": [
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "interestInflectionUtilX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "interestFloorX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "interestSmallCapX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "interestLargeCapX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(HealthInfo)13773_storage": {
            "label": "struct IFQuerier.HealthInfo",
            "members": [
              {
                "label": "assets",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "liabilities",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "health",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(LegacyRisk)13718_storage": {
            "label": "struct IFQuerier.LegacyRisk",
            "members": [
              {
                "label": "longWeightInitialX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "shortWeightInitialX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "longWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "shortWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "largePositionPenaltyX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpBalance)13871_storage": {
            "label": "struct IPerpEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpBalance)14294_storage": {
            "label": "struct ISpotEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpState)13866_storage": {
            "label": "struct IPerpEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingPerLpX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "quote",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpState)14291_storage": {
            "label": "struct ISpotEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "quote",
                "type": "t_struct(Balance)14279_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_struct(Balance)14279_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(PerpBalance)13707_storage": {
            "label": "struct IFQuerier.PerpBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)13871_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)13855_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(PerpProduct)13766_storage": {
            "label": "struct IFQuerier.PerpProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)13718_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "state",
                "type": "t_struct(State)13848_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)13866_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)13729_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(SpotBalance)13698_storage": {
            "label": "struct IFQuerier.SpotBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)14294_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)14279_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(SpotProduct)13749_storage": {
            "label": "struct IFQuerier.SpotProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)13718_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "config",
                "type": "t_struct(Config)14265_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "state",
                "type": "t_struct(State)14274_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)14291_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)13729_storage",
                "offset": 0,
                "slot": "12"
              }
            ],
            "numberOfBytes": "480"
          },
          "t_struct(State)13848_storage": {
            "label": "struct IPerpEngine.State",
            "members": [
              {
                "label": "cumulativeFundingLongX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingShortX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "availableSettle",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "openInterest",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(State)14274_storage": {
            "label": "struct ISpotEngine.State",
            "members": [
              {
                "label": "cumulativeDepositsMultiplierX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeBorrowsMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "totalDepositsNormalized",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalBorrowsNormalized",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(SubaccountInfo)13806_storage": {
            "label": "struct IFQuerier.SubaccountInfo",
            "members": [
              {
                "label": "subaccount",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "healths",
                "type": "t_array(t_struct(HealthInfo)13773_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "healthContributions",
                "type": "t_array(t_array(t_int128)dyn_storage)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "spotCount",
                "type": "t_uint32",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "perpCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "4"
              },
              {
                "label": "spotBalances",
                "type": "t_array(t_struct(SpotBalance)13698_storage)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "perpBalances",
                "type": "t_array(t_struct(PerpBalance)13707_storage)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "spotProducts",
                "type": "t_array(t_struct(SpotProduct)13749_storage)dyn_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "perpProducts",
                "type": "t_array(t_struct(PerpProduct)13766_storage)dyn_storage",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "5dad29eca02971a216ad6e652fe94a90716e8a1918e70bbcfeb40834e6c33a38": {
      "address": "0xE882EeE3E867dD259ee884A00Fc07Dc38971124A",
      "txHash": "0x84b2768276ab673d3b4e00570b0a7053f2f6af95a81a6c10b07498a550b52e27",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2773",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)14213",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)12258_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)12258_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)12266_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)12272_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2773": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)14213": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)12247": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)12258_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)12266_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)12258_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)12247",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)12272_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)12266_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "fc910504d62278c65300160226cdc92f34c38b918d57b96c18eda6b54a6939b8": {
      "address": "0x31CBDd895eD83ece4b70fBcDA53Fe0655807532C",
      "txHash": "0x18fae686cdbc2976879c9f89590b29d3418d7b563dc9396e448185486d85a8f3",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:51"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:53"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:59"
          },
          {
            "label": "balance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:61"
          },
          {
            "label": "subaccountInfo",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(SubaccountInfo)6127_storage",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:62"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_array(t_int128)dyn_storage)dyn_storage": {
            "label": "int128[][]",
            "numberOfBytes": "32"
          },
          "t_array(t_int128)dyn_storage": {
            "label": "int128[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(HealthInfo)6094_storage)dyn_storage": {
            "label": "struct IFQuerier.HealthInfo[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpBalance)6028_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpProduct)6087_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpProduct[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotBalance)6019_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotProduct)6070_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotProduct[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_int128": {
            "label": "int128",
            "numberOfBytes": "16"
          },
          "t_struct(Balance)6176_storage": {
            "label": "struct IPerpEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "vQuoteBalance",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Balance)6504_storage": {
            "label": "struct ISpotEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(BookInfo)6050_storage": {
            "label": "struct IFQuerier.BookInfo",
            "members": [
              {
                "label": "sizeIncrement",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "priceIncrementX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "minSize",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "collectedFees",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "lpSpreadX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Config)6490_storage": {
            "label": "struct ISpotEngine.Config",
            "members": [
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "interestInflectionUtilX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "interestFloorX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "interestSmallCapX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "interestLargeCapX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(HealthInfo)6094_storage": {
            "label": "struct IFQuerier.HealthInfo",
            "members": [
              {
                "label": "assets",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "liabilities",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "health",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(LegacyRisk)6039_storage": {
            "label": "struct IFQuerier.LegacyRisk",
            "members": [
              {
                "label": "longWeightInitialX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "shortWeightInitialX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "longWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "shortWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "largePositionPenaltyX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpBalance)6192_storage": {
            "label": "struct IPerpEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpBalance)6519_storage": {
            "label": "struct ISpotEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpState)6187_storage": {
            "label": "struct IPerpEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingPerLpX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "quote",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpState)6516_storage": {
            "label": "struct ISpotEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "quote",
                "type": "t_struct(Balance)6504_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_struct(Balance)6504_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(PerpBalance)6028_storage": {
            "label": "struct IFQuerier.PerpBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)6192_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)6176_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(PerpProduct)6087_storage": {
            "label": "struct IFQuerier.PerpProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)6039_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "state",
                "type": "t_struct(State)6169_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)6187_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)6050_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(SpotBalance)6019_storage": {
            "label": "struct IFQuerier.SpotBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)6519_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)6504_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(SpotProduct)6070_storage": {
            "label": "struct IFQuerier.SpotProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)6039_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "config",
                "type": "t_struct(Config)6490_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "state",
                "type": "t_struct(State)6499_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)6516_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)6050_storage",
                "offset": 0,
                "slot": "12"
              }
            ],
            "numberOfBytes": "480"
          },
          "t_struct(State)6169_storage": {
            "label": "struct IPerpEngine.State",
            "members": [
              {
                "label": "cumulativeFundingLongX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingShortX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "availableSettle",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "openInterest",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(State)6499_storage": {
            "label": "struct ISpotEngine.State",
            "members": [
              {
                "label": "cumulativeDepositsMultiplierX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeBorrowsMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "totalDepositsNormalized",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalBorrowsNormalized",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(SubaccountInfo)6127_storage": {
            "label": "struct IFQuerier.SubaccountInfo",
            "members": [
              {
                "label": "subaccount",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "healths",
                "type": "t_array(t_struct(HealthInfo)6094_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "healthContributions",
                "type": "t_array(t_array(t_int128)dyn_storage)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "spotCount",
                "type": "t_uint32",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "perpCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "4"
              },
              {
                "label": "spotBalances",
                "type": "t_array(t_struct(SpotBalance)6019_storage)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "perpBalances",
                "type": "t_array(t_struct(PerpBalance)6028_storage)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "spotProducts",
                "type": "t_array(t_struct(SpotProduct)6070_storage)dyn_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "perpProducts",
                "type": "t_array(t_struct(PerpProduct)6087_storage)dyn_storage",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "1ccf7259b33c66cf61cae6e7085f5117f78c5d6e6b8c06ebb8d67dbd50dc84c8": {
      "address": "0x40BfD1905d709559a42c40d4B7dBF6F570b5053c",
      "txHash": "0xf519799c861f6298d4a348ed4ff4de42790e942b2236b53417188c7d84cf98a4",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:51"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:53"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:59"
          },
          {
            "label": "balance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:61"
          },
          {
            "label": "subaccountInfo",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(SubaccountInfo)13062_storage",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:62"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_array(t_int128)dyn_storage)dyn_storage": {
            "label": "int128[][]",
            "numberOfBytes": "32"
          },
          "t_array(t_int128)dyn_storage": {
            "label": "int128[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(HealthInfo)13029_storage)dyn_storage": {
            "label": "struct IFQuerier.HealthInfo[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpBalance)12963_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpProduct)13022_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpProduct[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotBalance)12954_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotProduct)13005_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotProduct[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_int128": {
            "label": "int128",
            "numberOfBytes": "16"
          },
          "t_struct(Balance)13111_storage": {
            "label": "struct IPerpEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "vQuoteBalance",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Balance)13535_storage": {
            "label": "struct ISpotEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(BookInfo)12985_storage": {
            "label": "struct IFQuerier.BookInfo",
            "members": [
              {
                "label": "sizeIncrement",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "priceIncrementX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "minSize",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "collectedFees",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "lpSpreadX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Config)13521_storage": {
            "label": "struct ISpotEngine.Config",
            "members": [
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "interestInflectionUtilX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "interestFloorX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "interestSmallCapX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "interestLargeCapX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(HealthInfo)13029_storage": {
            "label": "struct IFQuerier.HealthInfo",
            "members": [
              {
                "label": "assets",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "liabilities",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "health",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(LegacyRisk)12974_storage": {
            "label": "struct IFQuerier.LegacyRisk",
            "members": [
              {
                "label": "longWeightInitialX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "shortWeightInitialX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "longWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "shortWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "largePositionPenaltyX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpBalance)13127_storage": {
            "label": "struct IPerpEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpBalance)13550_storage": {
            "label": "struct ISpotEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpState)13122_storage": {
            "label": "struct IPerpEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingPerLpX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "quote",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpState)13547_storage": {
            "label": "struct ISpotEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "quote",
                "type": "t_struct(Balance)13535_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_struct(Balance)13535_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(PerpBalance)12963_storage": {
            "label": "struct IFQuerier.PerpBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)13127_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)13111_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(PerpProduct)13022_storage": {
            "label": "struct IFQuerier.PerpProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)12974_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "state",
                "type": "t_struct(State)13104_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)13122_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)12985_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(SpotBalance)12954_storage": {
            "label": "struct IFQuerier.SpotBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)13550_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)13535_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(SpotProduct)13005_storage": {
            "label": "struct IFQuerier.SpotProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)12974_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "config",
                "type": "t_struct(Config)13521_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "state",
                "type": "t_struct(State)13530_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)13547_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)12985_storage",
                "offset": 0,
                "slot": "12"
              }
            ],
            "numberOfBytes": "480"
          },
          "t_struct(State)13104_storage": {
            "label": "struct IPerpEngine.State",
            "members": [
              {
                "label": "cumulativeFundingLongX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingShortX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "availableSettle",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "openInterest",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(State)13530_storage": {
            "label": "struct ISpotEngine.State",
            "members": [
              {
                "label": "cumulativeDepositsMultiplierX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeBorrowsMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "totalDepositsNormalized",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalBorrowsNormalized",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(SubaccountInfo)13062_storage": {
            "label": "struct IFQuerier.SubaccountInfo",
            "members": [
              {
                "label": "subaccount",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "healths",
                "type": "t_array(t_struct(HealthInfo)13029_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "healthContributions",
                "type": "t_array(t_array(t_int128)dyn_storage)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "spotCount",
                "type": "t_uint32",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "perpCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "4"
              },
              {
                "label": "spotBalances",
                "type": "t_array(t_struct(SpotBalance)12954_storage)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "perpBalances",
                "type": "t_array(t_struct(PerpBalance)12963_storage)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "spotProducts",
                "type": "t_array(t_struct(SpotProduct)13005_storage)dyn_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "perpProducts",
                "type": "t_array(t_struct(PerpProduct)13022_storage)dyn_storage",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "d94ee857f9581216eb4dbef358605c116a9b1881cadc6d44bbb87bdc9b575884": {
      "address": "0xFfF4D57e3Db3a87A24f0082c2e444be4b2dD1f70",
      "txHash": "0xa464904b60cf53495124ade6db1217d62141c4301443c54312f5fb02ed0f1ba0",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:51"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:53"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:59"
          },
          {
            "label": "balance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:61"
          },
          {
            "label": "subaccountInfo",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(SubaccountInfo)6135_storage",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:62"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_array(t_int128)dyn_storage)dyn_storage": {
            "label": "int128[][]",
            "numberOfBytes": "32"
          },
          "t_array(t_int128)dyn_storage": {
            "label": "int128[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(HealthInfo)6102_storage)dyn_storage": {
            "label": "struct IFQuerier.HealthInfo[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpBalance)6036_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpProduct)6095_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpProduct[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotBalance)6027_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotProduct)6078_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotProduct[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_int128": {
            "label": "int128",
            "numberOfBytes": "16"
          },
          "t_struct(Balance)6184_storage": {
            "label": "struct IPerpEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "vQuoteBalance",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Balance)6512_storage": {
            "label": "struct ISpotEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(BookInfo)6058_storage": {
            "label": "struct IFQuerier.BookInfo",
            "members": [
              {
                "label": "sizeIncrement",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "priceIncrementX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "minSize",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "collectedFees",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "lpSpreadX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Config)6498_storage": {
            "label": "struct ISpotEngine.Config",
            "members": [
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "interestInflectionUtilX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "interestFloorX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "interestSmallCapX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "interestLargeCapX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(HealthInfo)6102_storage": {
            "label": "struct IFQuerier.HealthInfo",
            "members": [
              {
                "label": "assets",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "liabilities",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "health",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(LegacyRisk)6047_storage": {
            "label": "struct IFQuerier.LegacyRisk",
            "members": [
              {
                "label": "longWeightInitialX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "shortWeightInitialX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "longWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "shortWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "largePositionPenaltyX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpBalance)6200_storage": {
            "label": "struct IPerpEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpBalance)6527_storage": {
            "label": "struct ISpotEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpState)6195_storage": {
            "label": "struct IPerpEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingPerLpX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "quote",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpState)6524_storage": {
            "label": "struct ISpotEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "quote",
                "type": "t_struct(Balance)6512_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_struct(Balance)6512_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(PerpBalance)6036_storage": {
            "label": "struct IFQuerier.PerpBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)6200_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)6184_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(PerpProduct)6095_storage": {
            "label": "struct IFQuerier.PerpProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)6047_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "state",
                "type": "t_struct(State)6177_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)6195_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)6058_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(SpotBalance)6027_storage": {
            "label": "struct IFQuerier.SpotBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)6527_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)6512_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(SpotProduct)6078_storage": {
            "label": "struct IFQuerier.SpotProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)6047_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "config",
                "type": "t_struct(Config)6498_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "state",
                "type": "t_struct(State)6507_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)6524_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)6058_storage",
                "offset": 0,
                "slot": "12"
              }
            ],
            "numberOfBytes": "480"
          },
          "t_struct(State)6177_storage": {
            "label": "struct IPerpEngine.State",
            "members": [
              {
                "label": "cumulativeFundingLongX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingShortX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "availableSettle",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "openInterest",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(State)6507_storage": {
            "label": "struct ISpotEngine.State",
            "members": [
              {
                "label": "cumulativeDepositsMultiplierX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeBorrowsMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "totalDepositsNormalized",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalBorrowsNormalized",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(SubaccountInfo)6135_storage": {
            "label": "struct IFQuerier.SubaccountInfo",
            "members": [
              {
                "label": "subaccount",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "healths",
                "type": "t_array(t_struct(HealthInfo)6102_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "healthContributions",
                "type": "t_array(t_array(t_int128)dyn_storage)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "spotCount",
                "type": "t_uint32",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "perpCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "4"
              },
              {
                "label": "spotBalances",
                "type": "t_array(t_struct(SpotBalance)6027_storage)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "perpBalances",
                "type": "t_array(t_struct(PerpBalance)6036_storage)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "spotProducts",
                "type": "t_array(t_struct(SpotProduct)6078_storage)dyn_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "perpProducts",
                "type": "t_array(t_struct(PerpProduct)6095_storage)dyn_storage",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "2d71725f7d39e28f7ed0abd343beba7ac4f43e51d29c35dc60f9ad43e855b52b": {
      "address": "0xCF53d073ac1665C865B2C70fb29585F22Dc039a4",
      "txHash": "0xb8bfb2b7b9ce010274be0872036741b91b0478b3754c672c1125d0706d13e790",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:37"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:39"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:41"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:43"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:45"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:47"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:49"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:51"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:53"
          },
          {
            "label": "whitelist",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:59"
          },
          {
            "label": "balance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:61"
          },
          {
            "label": "subaccountInfo",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(SubaccountInfo)6127_storage",
            "contract": "MockUpVertexInteraction",
            "src": "src/MockUpVertexInteraction.sol:62"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_array(t_int128)dyn_storage)dyn_storage": {
            "label": "int128[][]",
            "numberOfBytes": "32"
          },
          "t_array(t_int128)dyn_storage": {
            "label": "int128[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(HealthInfo)6094_storage)dyn_storage": {
            "label": "struct IFQuerier.HealthInfo[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpBalance)6028_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(PerpProduct)6087_storage)dyn_storage": {
            "label": "struct IFQuerier.PerpProduct[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotBalance)6019_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotBalance[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(SpotProduct)6070_storage)dyn_storage": {
            "label": "struct IFQuerier.SpotProduct[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_int128": {
            "label": "int128",
            "numberOfBytes": "16"
          },
          "t_struct(Balance)6176_storage": {
            "label": "struct IPerpEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "vQuoteBalance",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Balance)6504_storage": {
            "label": "struct ISpotEngine.Balance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(BookInfo)6050_storage": {
            "label": "struct IFQuerier.BookInfo",
            "members": [
              {
                "label": "sizeIncrement",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "priceIncrementX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "minSize",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "collectedFees",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "lpSpreadX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Config)6490_storage": {
            "label": "struct ISpotEngine.Config",
            "members": [
              {
                "label": "token",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "interestInflectionUtilX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "interestFloorX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "interestSmallCapX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "interestLargeCapX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(HealthInfo)6094_storage": {
            "label": "struct IFQuerier.HealthInfo",
            "members": [
              {
                "label": "assets",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "liabilities",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "health",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(LegacyRisk)6039_storage": {
            "label": "struct IFQuerier.LegacyRisk",
            "members": [
              {
                "label": "longWeightInitialX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "shortWeightInitialX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "longWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "shortWeightMaintenanceX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "largePositionPenaltyX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpBalance)6192_storage": {
            "label": "struct IPerpEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpBalance)6519_storage": {
            "label": "struct ISpotEngine.LpBalance",
            "members": [
              {
                "label": "amount",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LpState)6187_storage": {
            "label": "struct IPerpEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lastCumulativeFundingX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingPerLpX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              },
              {
                "label": "quote",
                "type": "t_int128",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(LpState)6516_storage": {
            "label": "struct ISpotEngine.LpState",
            "members": [
              {
                "label": "supply",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "quote",
                "type": "t_struct(Balance)6504_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "base",
                "type": "t_struct(Balance)6504_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(PerpBalance)6028_storage": {
            "label": "struct IFQuerier.PerpBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)6192_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)6176_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(PerpProduct)6087_storage": {
            "label": "struct IFQuerier.PerpProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)6039_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "state",
                "type": "t_struct(State)6169_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)6187_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)6050_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(SpotBalance)6019_storage": {
            "label": "struct IFQuerier.SpotBalance",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lpBalance",
                "type": "t_struct(LpBalance)6519_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "balance",
                "type": "t_struct(Balance)6504_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(SpotProduct)6070_storage": {
            "label": "struct IFQuerier.SpotProduct",
            "members": [
              {
                "label": "productId",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "oraclePriceX18",
                "type": "t_int128",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "risk",
                "type": "t_struct(LegacyRisk)6039_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "config",
                "type": "t_struct(Config)6490_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "state",
                "type": "t_struct(State)6499_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "lpState",
                "type": "t_struct(LpState)6516_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "bookInfo",
                "type": "t_struct(BookInfo)6050_storage",
                "offset": 0,
                "slot": "12"
              }
            ],
            "numberOfBytes": "480"
          },
          "t_struct(State)6169_storage": {
            "label": "struct IPerpEngine.State",
            "members": [
              {
                "label": "cumulativeFundingLongX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeFundingShortX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "availableSettle",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "openInterest",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(State)6499_storage": {
            "label": "struct ISpotEngine.State",
            "members": [
              {
                "label": "cumulativeDepositsMultiplierX18",
                "type": "t_int128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cumulativeBorrowsMultiplierX18",
                "type": "t_int128",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "totalDepositsNormalized",
                "type": "t_int128",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalBorrowsNormalized",
                "type": "t_int128",
                "offset": 16,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(SubaccountInfo)6127_storage": {
            "label": "struct IFQuerier.SubaccountInfo",
            "members": [
              {
                "label": "subaccount",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "healths",
                "type": "t_array(t_struct(HealthInfo)6094_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "healthContributions",
                "type": "t_array(t_array(t_int128)dyn_storage)dyn_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "spotCount",
                "type": "t_uint32",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "perpCount",
                "type": "t_uint32",
                "offset": 4,
                "slot": "4"
              },
              {
                "label": "spotBalances",
                "type": "t_array(t_struct(SpotBalance)6019_storage)dyn_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "perpBalances",
                "type": "t_array(t_struct(PerpBalance)6028_storage)dyn_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "spotProducts",
                "type": "t_array(t_struct(SpotProduct)6070_storage)dyn_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "perpProducts",
                "type": "t_array(t_struct(PerpProduct)6087_storage)dyn_storage",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "e094148139c946b6f5305868d86a24e25d6f4406beaa1353d441b069726e22ca": {
      "address": "0x8a5C2B9ca65fB249CE10D93FBdaeEA4Fc0A6Aa36",
      "txHash": "0xae813cf8a50dab6f6451faee4acfe4fa71c5a34cd4bde62820ae2d3a444f0900",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2773",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)14213",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)12258_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)12258_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)12266_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)12272_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2773": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)14213": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)12247": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)12258_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)12266_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)12258_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)12247",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)12272_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)12266_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "c0a9694700c1456032a3971c0562305f4e9ded4f148cad239cadae989ae396b4": {
      "address": "0x14FFF343c05bAAAe949EaaBF9d516a6769282B0B",
      "txHash": "0x69f128c492720357ab4cec239b9e692002b36bb910088b7a30b67992e8804ff3",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9464",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7509_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)7509_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7517_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)7523_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9464": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7498": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7509_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7517_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7509_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7498",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7523_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7517_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "46ef180afe331a12116efbabb1e7a568b59892627120f38414989aeff1c1f004": {
      "address": "0x688dAAFAd9e0cf5E4e1Fb0B485Ab460e927aB987",
      "txHash": "0x541d0b23ddc0ee9876d88083b6bc9a0f50753db1ae05e6da7f062681ee2b9ca6",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9484",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)7529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7537_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)7543_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9484": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7518": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7529_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7537_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7529_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7518",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7543_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7537_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "4f80cebb6747686ec6feee1746676f729cacaf8108e4de2122d5e1614ae28537": {
      "address": "0x1bfF9802813d83D3E6445f9fdDA7A186Edba2F26",
      "txHash": "0xa26883459ca9dc2bd3ad9fb77685b79892aaffc9ad6054b2ed502df4e08899d1",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9484",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)7529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7537_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)7543_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9484": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7518": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7529_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7537_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7529_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7518",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7543_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7537_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "5b0aff9b204a870c3a571ff09a45c59da0e72e56d20fc64331292c6b80a80350": {
      "address": "0x089A0e5C5726A139C288A41030eF9b4c77EAD71f",
      "txHash": "0x168c4fa46f050cea223c062b0e4b2abceef84d56d937b9abce51ef33a6c3f446",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9484",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)7529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7537_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)7543_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9484": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7518": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7529_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7537_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7529_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7518",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7543_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7537_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "a8d59e7f11bc07c07eaf18b788728d9d8e17423de70ebcad594e0b04c8efe6be": {
      "address": "0xD56218A9Ce5f16f4766940Ad01429136f74C4728",
      "txHash": "0x0112320c2a0eaa7e7bd13f2a8649a5319c7f29a15189a879962cdc48aacfae04",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9484",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)7529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7537_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)7543_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9484": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7518": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7529_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7537_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7529_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7518",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7543_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7537_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "fb71b6d1e23acd6845f73b6588fb75e920d7b523a52fbdfa99f802c73fab53f9": {
      "address": "0x8Ce3f6118E229C72f76b07A78aea7d89555A6Bb8",
      "txHash": "0x4372793b72230d6a5907a89923cdd4b02ea44ae1f36f2d294e853ab3c899cb82",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "_asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2258",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:73"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:75"
          },
          {
            "label": "linked",
            "offset": 21,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:77"
          },
          {
            "label": "_tx",
            "offset": 22,
            "slot": "0",
            "type": "t_bool",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:79"
          },
          {
            "label": "EPOCH_START",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:81"
          },
          {
            "label": "openZeppelinDefenderWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:83"
          },
          {
            "label": "traderBotWallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:85"
          },
          {
            "label": "endpointVertex",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:87"
          },
          {
            "label": "treasuryWallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:89"
          },
          {
            "label": "MANAGEMENT_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:91"
          },
          {
            "label": "PERFORMANCE_FEE_PERCENTAGE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:93"
          },
          {
            "label": "VAULT_TOKEN_PRICE",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:95"
          },
          {
            "label": "TOTAL_VAULT_TOKEN_SUPPLY",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:97"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(IRouter)9484",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:99"
          },
          {
            "label": "EPOCH_DURATION",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:101"
          },
          {
            "label": "CURRENT_EPOCH",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:103"
          },
          {
            "label": "MAINTENANCE_PERIOD_PRE_START",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:105"
          },
          {
            "label": "MAINTENANCE_PERIOD_POST_START",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:107"
          },
          {
            "label": "DEX_WALLET_BALANCE",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:109"
          },
          {
            "label": "MAX_DEPOSIT",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:111"
          },
          {
            "label": "MIN_DEPOSIT",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:113"
          },
          {
            "label": "MAX_TOTAL_DEPOSIT",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:115"
          },
          {
            "label": "MIN_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:117"
          },
          {
            "label": "TARGET_WALLET_BALANCE_USDC_TRANSFER_BOT",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:119"
          },
          {
            "label": "MIN_WALLET_BALANCE_ETH_TRANSFER_BOT",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:121"
          },
          {
            "label": "DECIMAL_FACTOR",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:123"
          },
          {
            "label": "depositWallets",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:125"
          },
          {
            "label": "DEPOSITS",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_struct(Basics)7529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:127"
          },
          {
            "label": "withdrawWallets",
            "offset": 0,
            "slot": "25",
            "type": "t_array(t_address)dyn_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:129"
          },
          {
            "label": "WITHDRAWALS",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_struct(Basics)7529_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:131"
          },
          {
            "label": "netTransfer",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_struct(NetTransfer)7537_storage)",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:137"
          },
          {
            "label": "limit",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(Limit)7543_storage",
            "contract": "BearVaultTestnet",
            "src": "src/BearVaultTestnet.sol:139"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)227_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)97_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)319_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)380_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address_payable": {
            "label": "address payable",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20Metadata)2258": {
            "label": "contract IERC20Metadata",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)9484": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(Status)7518": {
            "label": "enum DataTypes.Status",
            "members": [
              "Inactive",
              "Pending",
              "Claimet",
              "Completed",
              "PendingRedeem",
              "PendingWithdraw"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_struct(Basics)7529_storage)": {
            "label": "mapping(address => struct DataTypes.Basics)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NetTransfer)7537_storage)": {
            "label": "mapping(uint256 => struct DataTypes.NetTransfer)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Basics)7529_storage": {
            "label": "struct DataTypes.Basics",
            "members": [
              {
                "label": "status",
                "type": "t_enum(Status)7518",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amountAssets",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "amountShares",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "finalAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Limit)7543_storage": {
            "label": "struct DataTypes.Limit",
            "members": [
              {
                "label": "percentage",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(NetTransfer)7537_storage": {
            "label": "struct DataTypes.NetTransfer",
            "members": [
              {
                "label": "pending",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "direction",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    }
  }
}
